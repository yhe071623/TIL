
#2025/07/30~8/1
Node.js와 Express/배포(전통 vs 가상화 vs 클라우드)/클라우드 서비스 모델(IaaS, PaaS, SaaS)

# TIL
----------------------------------
Node.js와 Express 관련
1. Node.js의 특징은?
- Chrome V8 엔진 위에 구축된 자바스크립트 런타임, 싱글 스레드 기반이지만 이벤트 루프와 논블로킹 I/O를 통해 
동시에 많은 요청을 처리할 수 있어, I/O 중심 애플리케이션에 강하다. 웹 서버나 실시간 채팅에 적합

2. Node.js가 싱글 스레드인데도 높은 성능을 낼 수 있는 이유는?
- 이벤트 루트와 논블로킹 I/O 방식을 사용해 싱글 스레드로도 많은 요청을 동시에 처리할 수 있다. 무거운 I/O 작업은 libuv의 스레드풀에서
비동기적으로 처리되기 때문에, 메인 스레드는 블로킹 없이 빠르게 다음 요청을 처리 할 수 있어 성능이 높다.

3. Node.js에서 논블로킹 I/O란?
- 파일 읽기나 네트워크 요청 같은 작업을 수행할 때, 해당 작업이 끝날 때까지 기다리지 않고 다음 코드를 바로 실행하는 방식이다.
Node.js는 이런 구조를 통해 하나의 스레드로도 여러 요청을 동시에 처리할 수 있다.

4. Express.js는 어떤 역할?
- Node.js에서 많이 사용되는 웹 프레임워크로, 라우팅 처리, 미들웨어 적용, 정적 자원 제공 등 쉽게 구현 가능, 서버 구축이 빠르고 유지보수가 쉽다.

5. Express의 라우팅과 미들웨어 차이점?
- 라우팅은 특정 URL과 HTTP 메서드에 따라 요청을 처리하는 경로를 정의하는 것이고, 미들웨어는 요청과 응답 사이에서 공통 작업(로그, 인증 등)을 처리하는 함수입니다.
라우터는 목적지를 지정하고, 미들웨어는 그 경로 가기 전 혹은 도중에 거치는 과정이라고 볼 수 있다. 

6. 미들웨어란 어떤 것이고, 어떤 종류인가?
- 미들웨어는 요청과 응답 사이에서 실행되는 함수, 요청을 가로채어 로깅, 인증, 에러 처리 등을 수행, 체이닝 구조로 여러 개 연결 할 수 있다.
미들웨어의 종류는 애플리케이션 레벨, 라우터 레벨, 에러 처리, 내장, 서드파티, 조건부로 6가지 종류가 있다.

7. Express에서 정적 자원을 제공하려면?
- Express에서는 express.static( ) 미들웨어 사용해 이미지, css, JavaScript 파일 같은 정적 자원 제공한다.
app.use( )로 특정 디렉토리를 정적 자원으로 등록하면, 해당 경로의 파일들을 클라이언트가 직접 요청할 수 있다.

8. Node.js는 언제 선택하는 것이 좋나?
 - Node.js는 I/O 중심 애플리케이션, 예를 들어 실시간 채팅, 스트리밍 서비스, RESTful API 서버, 대량의 동시에 처리되는 요청이 많은
 서비스에 적합하다. 논블로킹 I/O와 이벤트 루프 구조 덕분에 수천 개의 요청을 효율적으로 처리할 수 있어, 성능이 중요한 네트워크 기반 애플리케이션에 강점을 보인다.

 Node.js가 부적합한 상황은 언제인가?
 - Node.js는 I/O 중심 애플리케이션에 강하지만, CPU 연산이 많은 작업에는 적합하지 않습니다.
 예를 들어 이미지 처리, 영상 인코딩, 복잡한 수학 연산, 머신러닝 연산처럼 CPU를 오래 점유하는 작업은 
 싱글 스레드 구조에서 전체 서버의 응답성을 떨어뜨릴 수 있다.
-----------------------
배포(전통 vs 가상화 vs 클라우드)
9. 전통적인 배포 방식과 가상화의 차이점?
- 전통 배포는 한 물리 서버에 여러 프로그램 설치하는 방식으로, 자원 충돌이나 관리의 어려움이 잇다. 반면 가상화는 가상 머신 통해 하나의 물리 서버에서
여러 운영체제를 실행할 수 있어, 더 높은 격리성과 유연성 제공

10. 가상머신(VM)과 컨테이너의 차이점은?
- 가상머신은 OS 전체 포함해 무겁고 부팅 시간 길지만, 
컨테이너는 호스트 OS 공유하고 필요한 라이브러리와 코드만 패키징하여 빠르고 경량화되어 있어 더 효율적인 자원 사용이 가능하다.

11. 클라우드 환경에서 오프프레미스와 온프레미스 차이는?
- 온프레미스는 기업이 직접 데이터센터에 서버와 인프라를 구축하고 운영하는 방식이고, 오프프레미스는 AWS, Azure 같은 클라우드 공급자가 인프라를
소유/관리하며 사용자는 인터넷으로 자원을 빌려쓰는 방식이다.

12. 클라우드 배포시 장점과 단점은?
- 장점은 초기 투자비용 절감, 확장성, 빠른 배포와 관리 편의성이며 단점은 인터넷 의존성, 보안 우려, 공급자에 대한 의존성 등이 있다.
13. 클라우드 보안 문제는 어떻게 해결할 수 있을까?
- 클라우드 환경에서 데이터 유출, 무단 접근, 서비스 중단 등 보안 위협이 존재하기 때문에 다음과 같은 방법으로 강화할 수 있다.
첫번째로 접근 제어 및 인증 강화로 IAM 통해 최소 권한 원칙을 적용하고 다중 인증(MFA) 사용으로 계정 탈취를 방지한다. 두번째 데이터를 암호화한다.
저장 데이터와 전송 중 데이터를 모두 암호화하고 AWS KMS, Azure Key Valut 같은 키 관리 서비스 활용할 수 있다 세번째로 네트워크 보안 설정을 한다.
보안그룹, 방화벽, VPC 구성 등으로 외부 접근을 제어하고 WAD(Web Application Firewall)과 IDS/IPS 적용한다. 이상 행동 탐지 및 로그 분석을 하며, 
SIEM 시스템과 연동하여 실시간 보안에 대응한다. 정기적인 보안 스캔과 자동 패치를 통해 위협 요소를 제거하고 인프라 코드(IaC)에 대한 보안 검사를 도입해
취약점 점검 및 패치 자동화 등의 보안 체계를 갖추는 것이 중요하다.

------------------------
클라우드 서비스 모델(IaaS, PaaS, SaaS)
14. IaaS,PaaS,SaaS를 실제 예시와 함께 설명
IaaS: AWS EC2 -> 사용자가 OS, 런타임, 애플리케이션 직접 관리
PaaS: Heroku, Google App Engine -> 플랫폼이 제공되어 앱만 배포
SaaS: Gmail, Figma -> 완성된 소프트웨어 서비스

15. IaaS와 PaaS의 차이점은?
- IaaS는 인프라만 제공하는 서비스로, AWS EC2처럼 사용자가 OS, 런타임, 애플리케이션까지 모두 설정하여 유연성과 이식성은 높지만 관리가 복잡하다
PaaS는 플랫폼을 제공해 Node.js같은 런타임이 세팅된 상태에서 애플리케이션만 배포해 개발이 쉽고 빠르지만 유연성과 이식성은 낮다.
SaaS는 완성된 소프트웨어를 서비스 형태로 사용, Gmail이나 Figma 같은 서비스 해당한다.

16. 왜 PaaS가 유연성이나 이식성이 낮다고 하나?
- PaaS는 플랫폼과 환경이 고정되어 있어 커스터마이징이 제한적이며, 특정 공급자에 종속될 가능성이 있기 때문에 이식성이 떨어진다.
17. 어떤 상황에서 Iaas가 더 적합한 선택인가?
- 직접 설정이 필요한 경우나 맞춤 구성이 중요한 경우 IaaS 선택, 
빠른 배포와 유지보수 원하는 스타트업/작은 팀은 PaaS 가 더 적합하다

18. SaaS 사용했을 때 개발자 입장에서 얻는 이점은?
- 인프라나 플랫폼 관리에 부담이 없고, 즉시 사용할 수 있어 개발과 운영이 간편해지면, 유지보수 비용과 시간을 감소할 수 있다.

------------------------------------------
Docker & 컨테이너
19. 컨테이너란 무엇이고 왜 사용하는가?
- 컨테이너는 애플리케이션과 그 실행에 필요한 모든 종속성을 패키징해 어느 환경에서나 동일하게 실행할 수 있게 하는 경량 가상화 기술로,
빠르고 효율적인 배포와 환경 일관성을 위해 사용한다.

20. 도커와 가상머신의 차이는?
- 도커는 OS를 공유하는 경량 컨테이너이고, 가상머신은 전체 OS를 가상화하는 무거운 환경이다.
도커는 빠른 시작과 적은 리소스 사용이 장점이다.

21. 도커 이미지와 도커 컨테이너 차이는?
- 도커 이미지는 실행 가능한 컨테이너를 만들기 위한 설계도이며, 불변하다. 이 이미지를 기반으로 실행되는 실제 인스턴스가 도커 컨테이너이다.
컨테이너는 상태를 가질 수 있지만 이미지는 그렇지 않다.

22. 도커파일에는 어떤 내용이?
- 도커 파일은 베이스 이미지 선택부터 필요한 패키지 설치, 환경 변수 설정, 애플리케이션 복사, 실행 명령어까지 포함한 스크립트로 이를 빌드하면 도커 이미지가 생성된다.

23. 도커를 사용하면 얻는 이점은 무엇인가요?
- 환경 일관성 유지할 수 있어 개발과 운영 환경 간 "작동 안 함" 문제 감소할 수 있다. 경량화되어 빠른 배포가 가능하며, 여러 환경에서 동일하게 애플리케이션을 실행할 수 있어 DevOps 적합하다.

24. 컨테이너 격리성(Isolation)이란 무엇이고 왜 중요한가요?
- 컨테이너는 독립된 실행 환경을 제공해 애플리케이션 간 자원 충돌이나 보안 문제를 줄인다.
이로 인해 안정적인 서비스 운영과 보안 강화가 가능하다.

25. 여러 컨테이너를 관리하기 위해 어떤 툴을 사용하나요? (예: Docker Compose, Kubernetes)
- Docker Compose는 개발환경에서 다중 컨테이너를 쉽게 관리하고, Kubernetes는 대규모 프로덕션 환경에서
자동화, 확장, 복구를 지원하는 오케스트레이션 툴이다.

26.CI/CD 파이프라인에서 도커는 어떤 역할을 하나요?
- 도커는 애플리케이션과 환경을 패키징해 일관된 빌드, 테스트, 배포를 가능하게 하여, CI/CD 자동화의 핵심 구성 요소로 사용된다.

------------------------------------------------------------------
응용 질문 (심화/경험 중심)
27.도커를 이용해 Node.js 애플리케이션을 배포해본 경험이 있나요?
-

28. PaaS 환경에서 애플리케이션을 배포해 본 경험이 있다면 어떤 장단점을 느꼈나요?
-

29. Express 서버를 도커 컨테이너로 배포할 때 주의할 점은 무엇인가요?
- 포트 매칭, 환경 변수 관리, 로그 관리, 컨테이너 내 상태 저장 최소화, 네트워크 설정에 주의

30. 컨테이너 기반 배포와 VM 기반 배포 중 어떤 것을 선호하고 그 이유는?
-

라우팅이란 무엇인가?
- 클라이언트의 특정 요청에 대해 애플리케이션이 어떻게 응답할지 결정하는 과정, URL(경로)와 특정 HTTP 요청 메소드(GET,POST 등)
조합에 따라 서버의 어떤 로직을 실행할지 연결해주는 역할을 한다.

온프레미스와 클라우드 서비스의 가장 큰 차이점은?
- 인프라의 소유 및 관리 주체이다. 온프레미스는 기업이 자체 데이터 센터에 직접 서버, 스토리지, 네트워크 등 IT 인프라를 구축하고 운영하는 방식이며,
클라우드 서비스는 AWS, GCP, Azure 같은 전문 공급업체가 소유하고 관리하는 인프라를 인터넷 통해 빌려쓰는 방식이다. 
따라서 초기 구축 비용 없이 저렴하고 빠르게 리소스를 이용할 수 있다는 장점이 있다.

도커 파일, 도커 이미지, 도커 컨테이너의 관계를 설명
- 설계도 -> 제품 -> 실제 사용하는 제품 관계로 비유할 수 있다
도커 파일은 컨테이너를 어떻게 만들지에 대한 설명서/설계도로, 필요한 os, 설치할 패키지, 환경 변수 설정,
실행할 명령어 등이 텍스트 파일에 기록되어 있다. 도커 이미지는 도커 파일을 빌드하여 만들어진 실행 가능한 패키지로 컨테이너 실행하는 데 필요한 모든 파일과 설정값 포함하여,
변하지 않는 상태이다. 하나의 이미지로 여러 개의 컨테이너를 생성 할 수 있다. 도커 컨테이너는 도커 이미지를 실행한 상태의 인스턴스이다. 격리된 공간에서 실제 애플리케이션이 동작하는 상태를 의미하며,
컴퓨팅 자원과 연결되어 메모리에 올라간다.
