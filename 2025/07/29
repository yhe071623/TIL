
#2025/07/29

# TIL

XML & JSON 관련 질문
1. XML과 JSON의 차이점
- 둘 다 모두 데이터 저장 및 전송 형식으로 XML은 태그 기반 구조로 구성되어 가독성은 낮지만 유연성은 높고, 대소문자 구분이 있다. JSON은 키-값 쌍 기반의 구조로 가볍고, javaSCript 객체와 바로 호환되어
웹 환경에서 많이 사용된다. XML은 문서 형식이 복잡하고 무겁기 때문에 API 응답 데이터로는 보통 JSON이 더 선호됨

2. XML의 구성요소로 어떤 게 있는가?
- 크게 프롤로그, 루트 요소, 하위 요소들로 구성되어있다. 프롤로그(Prolog)는 XML 번전과 인코딩 정보를 정의하며 루트 요소(Root Element)는 단 하나만 존재해야 하며 모든 XML 요소의 부모이다. 
하위 요소들(Child Elements)는 데이터 구조를 계층적으로 표현하는데 이 구성요소 통해서 XML은 데이터를 구조화하여 표현할 수 있다.

3. HTML과 XML의 차이는?
- HTML은 미리 정의된 태그를 사용하고, XML은 사용자가 직접 태그를 정의한다. HTML은 대 소문자 구분이 없지만, XML은 대소문자 구분을 철저히 한다. XML은 태그가 항상 닫혀 있어야 하며, 
HTML은 어느 정도 관대한 문법을 허용한다 -> HTML은 데이터를 표시하기 위한 마크업 언어이고, XML은 데이터를 저장하고 전송하기 위한 마크업 언어이다.

API 관련 질문
4. API란 무엇이고, 어떤 장점이 있나?
-API는 Application Programming Interface 약자로, 서로 다른 프로그램이 통신할 수 있게 도와주는 중간 계층으로 API 사용하면, 개발자가 내부 구현을 몰라도 기능을 사용할 수 있고, 
제공자는 보안과 일관성을 유지한 채 필요한 정보만 공개할 수 있다. 특히 Open API는 앱 개발을 더 쉽게 하고, 시간과 비용 감소시키며, 내부 로직이 변경되더라도 API 구조 유지하면 앱은 영향을 받지 않는다.

5. API 종류에는 어떤 것들이 있을까?
- API는 Private와 Public(Open)으로 구분할 수 있는데, private는 회사 내부에서만 사용하는 api로 보안성과 제어력이 높으며, 일반적으로 서버 간 통신에 사용된다. public api는 외부 개발자도 사용할 수 있는
api로 구글 맵, 날씨 API 등이 예이다. private는 해시 키등을 하드 코딩해서 인증하고, public은 토큰 기반 인증 또는 API 키로 접근 제어한다.

Interface 관련 질문
6. 소프트웨어에서 인터페이스란?
- 서로 다른 시스템이나 모듈 사이에 정보를 주고받기 위한 경계 지점으로 내부 구현에 대한 정보 없이 정의된 방식(메서드, 포맷 등)으로만 상호작용할 수 있도록 한다. 
예를 들어 클라이언트는 서버의 내부 로직을 몰라도 API 인터페이스만 있으면 요청을 보낼 수 있다. 인터페이스는 시스템 간 의존성을 낮추고 유지보수를 쉽게 만들어 준다.

7. SEO란 무엇이고, 왜 중요한가?
- SEO는 Search Engine Optimization, 검색 엔진 최적화로 웹 페이지가 구글 같은 검색 엔진에 더 잘 노출되도록 메타 태그, 콘텐츠 구조, 키워드 등 최적화한다.
SEO가 잘 되어있으면 유입량 증가, 브랜드 노출, 사용자 확보 비용 절감에 효과적이다.

XML(Extensible Markup Language) : 데이터 교환 형식
마크업 : 태그 등 이용하여 문서나 데이터의 구조 나타냄 (속성부여도 가능)
- XML의 구성
    1. 프롤로그 : 버전, 인코딩
    2. 루트요소(단하나만)
    3. 하위요소들
- HTML과 XML의 차이 (중요)
   1. HTML -> 데이터 표시 XML -> 데이터 저장 및 전송
   2. HTML : 미리 정의된 태그 사용 XML : 고유한 태그를 만들고 정의 가능
   3. XML : 대/소문자 구분, HTML : 대/소문자 구분 X
- JSON과 XML 차이
XML : 닫힌 태그가 계속해서 들어가기 때문에 JSON과 비교하면 무거움,JSObject로 변환하기 위해서는 Json보다 많은 노력 필요
- SEO(search Engine Optimization) : 검색 엔진 최적화

- API : 둘 이상 프로그램이 서로 통신하는 방법, 컴퓨터 사이 있는 중계 계층(프로토콜, 메서드, 데이터타입 등 정의된 중계 계층)
 - 장점
   1. 제공자는 서비스의 중요한 부분을 드러내지 않아도 됨
   2. 사용자는 해당 서비스가 어떻게 구현되는지 알 필요없이 필요한 정보만 받을 수 있음
   3. OPEN API -> 앱 개발 프로세스 단순화시키고 시간, 비용 절약
   4. 내부 프로세스 수정 시 API가 수정이 안 되게 만들 수 있음 (내부 DB< 로직 변경되어도 매번 앱 업데이트 하지 않아도 됨)
   5. 제공자는 데이터를 한 곳에 모을 수 있음
 - 종류
  private : 내부적 사용, 해시키 하드코딩 후 서버와 서버간 통신
  public : 모든 사람 사용
  
- Interface : 서로 다른 두 개의 시스템, 장치 사이 정보나 신호 주고받는 경우 접점이나 경계면, 
              내부 서버가 어떻게 구현되어 있는지 상관없이 인터페이스 통한 통신 가능
