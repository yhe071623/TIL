# TIL

#2025/08/12

1. 싱글톤 패턴이 무엇?
- 하나의 클래스에 단 하나의 인스턴스만 생성하고, 이를 전역적으로 접근할 수 있게 하는 패턴, 주로 DB 연결 모듈, 네트워크 통신 모듈처럼 인스턴스 생성 비용이 큰 I/O 바운드 작업에 많이 사용

2. 싱글톤 패턴의 장점?
- 동일 객체를 여러 모듈이 공유해 불필요한 객체 생성이 줄어들어 메모리가 절약된다. 인스턴스 생성 비용이 높은 I/O 바운드 작업에 효과적이다(성능 향상)

3. 싱글톤 패턴의 단점?
- 전역 인스턴스를 참조하게 되어 모듈 간 결합도가 높아져 의존성이 증가한다. TDD에서 단위 테스트는 독립성을 보장해야 하지만, 싱글톤은 하나의 인스턴스를 공유해 테스트 간 상태가 오염될 수 있다

4. 싱글톤 구현 방법?
- 존재 여부 확인 후 생성하는 단순 메서드 호출, 동기화로 스레드 안전성 확보하는 synchronized, 클래스 로딩 시 인스턴스를 생성하는 정적 멤버 초기화, 클래스 초기화 블록에서 생성하는 정적 블록 초기화,
getInstance() 호출 시 내부 클래스 로딩으로 지연 생성, 스레드 안전성을 확보하는 Lazy Holder, 인스턴스 여부를 두 번 확인하며 volatile로 메모리 가시성을 보장하는 DCL(Double Checked Locking),
 스레드의 세이프한 점을 보장하는 enum 으로 7가지 방식이 있다.

5. 스레드 안전한 싱글톤 구현 방법 중 권장되는 방식은?
- enum, lazy holder -> enum은 자바에서 직렬화, 리플렉션 문제까지 방지하며 스레드 안전성을 기본적으로 제공, lazy holder는 호출 시점에 로드되어 메모리 낭비를 방지하고, 성능과 스레드 안전성을 모두 확보

6. 싱글톤 패턴이 TDD에서 걸림돌이 되는 이유는?
- 하나의 인스턴슬를 공유하기 때문에, 테스트 간 상태가 공유되어 테스트 독립성이 깨질 수 있기 때문, TDD에서는 테스트 순서에 영향을 받지 않도록 해야 하는데, 싱글톤 인스턴스는 상태를 초기화하기 어려워 문제가 된다.

7. I/O 바운드 작업이란?
- CPU 연산보다 입출력 속도가 병목이 되는 작업, 디스크 접근, 네트워크 통신, DB 연결 등이 대표적이며 이런 작업에서 싱글톤 사용 시 반복 생성 비용을 감소할 수 있다. 
