
#TIL

#2025/08/13

- 팩토리/이터레이터 패턴, 의존성 주입(DI), 의존관계 역전 원칙(DIP)

팩토리 패턴
1. 팩토리 패턴이 무엇이며, 왜 사용하는가?
- 팩토리 패턴은 객체 생성 로직을 하위 클래스에 위임하여 상위클래스가 구체적인 생성 방식을 알 필요없도록 하는 생성 패턴, 상위 클래스에서는 공통적인 로직과 구조를 유지하면서, 하위 클래스에서 객체 생성의 구체적인 부분을 결정,
객체 생성 코드가 한 곳에 모여 유지보수가 쉬워지고, 새로운 타입의 객체를 추가할 때 기존 코드를 최소한으로 수정하게 됨

2. 팩토리 패턴의 장단점?
- 장점은 객체 생성 코드와 사용 코드를 분리하여 결합도 낮출 수 있고, 유지보수성과 확장성이 좋아짐, 단점은 클래스 수가 늘어나 복잡도가 증가할 수 있고, 간단한 로직에는 코드가 과도하게 복잡해질 수 있음

이터레이터 패턴
3. 이터레이터 패턴의 핵심 아이디어?
- 컨테이너 내부 구조를 노출하지 않고 요소에 순차적으로 접근할 수 있게 하는 패턴, 배열, 리스트, 맵 등 서로 다른 자료구조라도 같은 방식의 인터페이스로 순회할 수 있어 일관성 제공

4. 이터레이터 패턴 적용 시 얻는 장점은?
- 자료구조의 내부 구현과 상관없이 동일한 방식으로 접근할 수 있어 코드 재사용성이 높아지고 자료구조 변경 시에도 순회 로직을 변경할 필요가 없어 유지보수성이 좋음

의존성 주입(DI) & 의존관계 역전 원칙(DIP)
5. 의존성 주입(DI)이란 무엇이고, 어떤 문제를 해결하나?
- 의존성 주입은 객체가 사용할 의존 객체를 직접 생성하지 않고 외부에서 주입받는 방법, 모듈 간 결합도를 낮추고, 객체 교체나 테스트를 쉽게 할 수 있음

6. DIP(의존관계 역전 원칙)과 DI의 관계?
- DIP는 상위 모듈은 하위 모듈에 의존하지 않고, 추상화에 의존해야한다는 설계원칙으로 DI는 이 원칙을 실현하는 기법 중 하나로, 의존성을 외부에서 주입함으로써 상위모듈이 추상화에만 의존하도록 한다.
DIP는 설계 철학이고, DI는 그 철학을 구현하는 방법임

7. 의존성 주입의 단점은?
- 모듈이 늘어나 복잡도가 증가할 수 있으며, 주입이 런타임에 일어나기 때문에 컴파일 시점에 의존성 문제를 발견하기 어렵다. DI(Spring 등)을 사용하면 초기 설정이 복잡해 질 수 있다.

