
#TIL

#2025/08/06

1. 오버로딩과 오버라이딩의 차이는?
- 오버로딩은 같은 이름의 메서드를 매개변수 타입, 개수, 순서를 다르게 하여 같은 클래스 내 여러 개 정의하는 방식이지만 오버라이딩은 상위클래스의 메서드를 하위 클래스가 재정의하는 것으로,
상속 구조에서 사용된다. 오버라이딩은 static, final, private 메서드에 적용되지 않는다.
2. 오버라이딩이 필요한 이유는?
- 오버라이딩은 상속받은 기능을 상황에 맞게 재정의할 수 있도록 도와준다. 공통 인터페이스를 유지하면서도 다형성을 통해 유연한 코드 작성이 가능하게 된다.
3. 추상화란?
- 불필요한 세부정보를 숨기고, 핵심적인 기능만을 드러내는 것으로 내부 복잡도를 줄여, 사용자 관점에서의 단순한 인터페이스 제공이 목적이다.
추상 클래스나 인터페이스를 통해 객체들의 공통된 특성을 묶어 설계할 수 있다.
4. 데이터 추상화와 프로세스 추상화의 차이?
- 데이터 추상화는 공통된 속성과 동작을 묶는 것이며 프로세스 추사오하는 내부 처리를 숨기고 외부에 단순한 동작만 제공하는 것
5. 컴파일러와 인터프리터의 차이는?
- 컴파일러는 전체 코드를 한 번에 기계어로 변환해 실행하는 것으로 C,C++ 같은 언어가 대표적으로 실행 속도가 빠르다.
인터프리터는 코드를 한 줄씩 읽고 바로 실행하는 것으로, Python, JavaScript 같은 언어에 사용되며, 실행이 직관적이고 수정이 쉬운 장점이 있지만, 반복 실행 시 속도는 느릴 수 있다
둘의 가장 큰 차이는 기계어 변환 시점과 실행 방식이다.
6. JIT 컴파일러의 역할?
- JIT(Just-In-Time) 컴파일러는 인터프리터와 컴파일러의 중간 형태로, 실행 도중 코드의 특정 부분을 기계어로 변환하고 최적화한다. 자주 사용되는 코드를 빠르게 실행하기 위해 실행 중 동적으로
컴파일하는 방식으로 장점으로 반복되는 부분의 실행 속도가 빠르지만, 단점은 메모리 사용량이 늘어난다는 점이다.
7. JIT 컴파일러가 없을 때 생기는 문제?
- 모든 코드를 매번 인터프리팅하게 되어, 반복적으로 호출되는 로직에서 성능 저하가 심해질 수 있다. JIT는 핫스팟을 분석해 컴파일해 두므로 실행 속도를 크게 향상시 킬 수 있다.
반복이 많은 환경에서 성능 향상에 큰 차이를 보임
8. 어떤 상황에서 인터프리터 방식이 유리한가
- 빠른 테스트와 디버깅이 필요한 경우 유리, 성능이 중요한 환경에서는 컴파일러 방식 또는 JIT가 적합
9. 자바가 JIT를 사용하는 이유?
- 자바는 바이트코드 형태로 중간 언어로 변환된 후, JVM에서 실행되는데, 이 때 JTI 사용해 자주 실행되는 부분을 기계어로 변환해 성능 향상, 처음에는 인터프리팅으로 실행되지만,
점점 최적화되면서 실행 속도가 빨라지는 방식으로 성능과 이식성 모두 확보
