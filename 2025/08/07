
#TIL

#2025/08/07

1. 디자인 패턴이란?
- 소프트웨어 설계하면서 발생하는 문제를 해결하기 위한 정형화된 객체 간의 관계와 설계 구조를 제시한 일종의 설계 규약. 많은 라이브러리와 프레임워크가 디자인 패턴을 기반으로 만들어져 있어, 디자인 패턴 이해하고 있으면 복잡한
구조나 동작 원리를 더 쉽게 파악할 수 있고, 협업 시 빠르게 의하소통이 가능해진다

2. 디자인 패턴의 종류?
- 크게 생성, 구조, 행동 패턴으로 나뉘며, 생성 패턴은 객체를 생성하는 방식에 대한 패턴으로, 싱글톤, 팩토리, 빌더 등이 있으며, 구조 패턴은 객체나 클래스를 효율적으로 조합해 더 큰 구조를 만들기 위한 패턴으로 프록시, 어댑터,
데코레이터 등 있다. 행동 패턴은 클래스나 객체 간 상호작용과 책임 분배에 초점을 둔 것으로, 옵저버, 전략, 이터레이터 패턴 등이 있다. 요구사항이나 구조적 복잡도따라 적절한 패턴을 선택해 적용할 수 있다.

3. 라이브러리와 프레임워크의 차이점은?
- 공통 기능을 모듈화한 형태지만, 제어 흐름의 주도권에 차이가 있다. 라이브러리는 직접 필요할 때 호출하는 도구 같은 존재지만, 프레임워크는 전체 흐름을 갖고 있고, 정해진 방식에 따라 코드를 넣는 구조이다.
예를 들어 spring, react가 있다.
